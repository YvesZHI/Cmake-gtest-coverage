!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
GetID	include/Student.h	/^    inline unsigned int GetID() const$/;"	f	class:Student	access:public	signature:() const
GetName	include/Student.h	/^    inline std::string GetName() const$/;"	f	class:Student	access:public	signature:() const
STUDENT_H_	include/Student.h	2;"	d
SetID	include/Student.h	/^    inline void SetID(unsigned int _id)$/;"	f	class:Student	access:public	signature:(unsigned int _id)
SetName	include/Student.h	/^    inline void SetName(const std::string &_name)$/;"	f	class:Student	access:public	signature:(const std::string &_name)
ShowInfo	include/Student.h	/^    inline void ShowInfo() const$/;"	f	class:Student	access:public	signature:() const
Student	include/Student.h	/^    Student();$/;"	p	class:Student	access:public	signature:()
Student	include/Student.h	/^    Student(Student &&) = default;$/;"	p	class:Student	access:public	signature:(Student &&)
Student	include/Student.h	/^    Student(const Student &) = default;$/;"	p	class:Student	access:public	signature:(const Student &)
Student	include/Student.h	/^    Student(unsigned int, const std::string &);$/;"	p	class:Student	access:public	signature:(unsigned int, const std::string &)
Student	include/Student.h	/^class Student$/;"	c
Student	src/Student.cpp	/^Student::Student() : id(0), name()$/;"	f	class:Student	signature:()
Student	src/Student.cpp	/^Student::Student(unsigned int _id, const std::string &_name) : id(_id), name(_name)$/;"	f	class:Student	signature:(unsigned int _id, const std::string &_name)
Student::GetID	include/Student.h	/^    inline unsigned int GetID() const$/;"	f	class:Student	access:public	signature:() const
Student::GetName	include/Student.h	/^    inline std::string GetName() const$/;"	f	class:Student	access:public	signature:() const
Student::SetID	include/Student.h	/^    inline void SetID(unsigned int _id)$/;"	f	class:Student	access:public	signature:(unsigned int _id)
Student::SetName	include/Student.h	/^    inline void SetName(const std::string &_name)$/;"	f	class:Student	access:public	signature:(const std::string &_name)
Student::ShowInfo	include/Student.h	/^    inline void ShowInfo() const$/;"	f	class:Student	access:public	signature:() const
Student::Student	include/Student.h	/^    Student();$/;"	p	class:Student	access:public	signature:()
Student::Student	include/Student.h	/^    Student(Student &&) = default;$/;"	p	class:Student	access:public	signature:(Student &&)
Student::Student	include/Student.h	/^    Student(const Student &) = default;$/;"	p	class:Student	access:public	signature:(const Student &)
Student::Student	include/Student.h	/^    Student(unsigned int, const std::string &);$/;"	p	class:Student	access:public	signature:(unsigned int, const std::string &)
Student::Student	src/Student.cpp	/^Student::Student() : id(0), name()$/;"	f	class:Student	signature:()
Student::Student	src/Student.cpp	/^Student::Student(unsigned int _id, const std::string &_name) : id(_id), name(_name)$/;"	f	class:Student	signature:(unsigned int _id, const std::string &_name)
Student::id	include/Student.h	/^    unsigned int id;$/;"	m	class:Student	access:private
Student::name	include/Student.h	/^    std::string name;$/;"	m	class:Student	access:private
Student::operator =	include/Student.h	/^    Student & operator=(Student &&) = default;$/;"	p	class:Student	access:public	signature:(Student &&)
Student::operator =	include/Student.h	/^    Student & operator=(const Student &) = default;$/;"	p	class:Student	access:public	signature:(const Student &)
Student::~Student	include/Student.h	/^    ~Student() = default;$/;"	p	class:Student	access:public	signature:()
TEST_F	unittest/TestStudent.cpp	/^TEST_F(TestStudent, ID)$/;"	f	signature:(TestStudent, ID)
TestStudent	unittest/TestStudent.cpp	/^class TestStudent : public ::testing::Test$/;"	c	file:	inherits:::testing::Test
TestStudent::ps	unittest/TestStudent.cpp	/^    Student *ps;$/;"	m	class:TestStudent	file:	access:protected
gtest	README.md	/^This project is a sample which presents how `gtest`, `gcovr` and `cmake` work together.$/;"	v
id	include/Student.h	/^    unsigned int id;$/;"	m	class:Student	access:private
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	unittest/TestStudent.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
name	include/Student.h	/^    std::string name;$/;"	m	class:Student	access:private
operator =	include/Student.h	/^    Student & operator=(Student &&) = default;$/;"	p	class:Student	access:public	signature:(Student &&)
operator =	include/Student.h	/^    Student & operator=(const Student &) = default;$/;"	p	class:Student	access:public	signature:(const Student &)
ps	unittest/TestStudent.cpp	/^    Student *ps;$/;"	m	class:TestStudent	file:	access:protected
~Student	include/Student.h	/^    ~Student() = default;$/;"	p	class:Student	access:public	signature:()
